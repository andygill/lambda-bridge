Lambda bridge is a generic bridge from Haskell (on a CPU) to VHDL on a FPGA.

Directory Structure

 * Network -- the Haskell source
   * Network/LambdaBridge/... -- generic Haskell "network" code for building lambda bridges.

 * drivers -- The lambda-bridge device driver, in user-space. They are implemented
   as stand alone user processes that are pre-invoked before calling the connect function,
  
   By convention, the lambda-bridge driver binaries start with lb_. All generate a connectable socket.

   * Current drivers

   lb_rs232	- the 232 driver, connects via a 232 cabal

   * Future drivers

   lb_udp       - generic packet-level transfer protocol, connects via UDP packets.
   lb_usb	- connect over a USB 2.0 [in lambda-bridge-usb] 

   * Toy/Example/Debugging drivers

   lb_byte	- generic byte-level transfer protocol, connects via (low-level) sockets
   lb_loopback	- loopback driver, just reflects the data sent straight back


 * cores -- Cores (VHDL code) to implement the lambda-bridge.
   
   For every driver, there is a directory that contains VHDL code.

     cores
      +- rs232

 * tools - Tools used to test and/or build the lambda bridge.
 
   lb_bridge	- (trivial) bridge, generates two low-level sockets and implements
   		  full duplex with optional failure insertions.

   lb_bootstrap	 - test a connection by sending messages to a high-level socket, through a lambda-bridge.


